@using FistWeb.Components.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject IJSRuntime JS
@page "/"
@* @inject ILogger<ViewDoanhThu> Logger *@
@inject IUserService CallService
@inject IThongKeService ThongKeService


<div class="container">
    <div class="content">
        @* <h1 class="page-title">Tổng hợp doanh thu</h1> *@

        <!-- Charts Grid -->
        <div class="dashboard-grid">
            <!-- Daily Work Hours Statistics -->
            <div class="chart-card">
                <h3 class="card-title">
                    📈 Tổng doanh thu tháng @month
                    <div class="staff-controls">
                        <select class="control-select" value="Month" @onchange="OnMonthChanged">
                            @for (int i = 1; i <= 12; i++)
                            {
                                <option value="@i.ToString("D2")">@i.ToString("D2")</option>
                            }
                        </select>
                     </div>
                </h3>
                <div class="chart-wrapper">
                    <div class="chart-container">
                        @* <canvas id="workHoursChart"></canvas> *@
                        <canvas id="Doanhthuthang"></canvas>
                        <h4 class="chart-legend">Tổng doanh thu tháng @month: @tongdoanhthuthang.ToString("N0") Vnđ</h4>
                    </div>
                </div>
            </div>

            <!-- Daily Work Frequency Statistics -->
            <div class="chart-card">
                <h3 class="card-title">
                    📈 Tổng doanh thu năm @year
                    <div class="staff-controls">
                        @* <select class="control-select" @bind="year" @bind:after="async () => await OnYearChanged()"> *@
                        <select class="control-select" value="year" @onchange="OnYearChanged">
                             <option value="@(int.Parse(year) - 1)">@(int.Parse(year) - 1)</option>
                             <option value="@year">@year</option>
                             <option value="@(int.Parse(year) + 1)">@(int.Parse(year) + 1)</option>
                        </select>
                    </div>
                </h3>
                <div class="chart-container">
                    <canvas id="Doanhthunam"></canvas>
                    <h4 class="chart-legend">Tổng doanh thu năm @year: @tongDoanhThuNam.ToString("N0") Vnđ</h4>
                </div>
            </div>
        </div>

        <!-- Staff Statistics -->
        <div class="staff-section">
            <div class="staff-header">
                <h3 class="card-title">
                    📈 Tổng doanh thu theo sản phẩm trong năm @year
                </h3>
                <div class="staff-controls">
                    <select class="control-select">
                        <option>Plant-Cust</option>
                    </select>
                    <select class="control-select">
                        <option>VN2</option>
                    </select>
                    <select class="control-select">
                        <option>A31</option>
                    </select>
                </div>
            </div>
            <div class="staff-chart">
                <canvas id="DoanhthunamtheoSP"></canvas>
            </div>
        </div>
    </div>
</div>


@code {
    private DateTime selectedDate = DateTime.Today;

    private bool filterByProductType = false;
    private bool doanhThuUocTinh = true;
    private bool doanhThuChinhXac = false;
    private bool hienThiDangLine = false;
    private bool isSearching = false;

    private List<DTOs.UserOrderDto> orders;
    private List<DTOs.DoanhThuThueDoDto> Doanhthuthang;
    private List<DTOs.DoanhThuThueDoDto> Doanhthunam;

    private string month;
    private string year;
    private double tongdoanhthuthang;
    private double tongDoanhThuNam;

    //private int SelectedYear { get; set; } = 2025;


    private async Task OnYearChanged(ChangeEventArgs e)
    {
        int nam = int.Parse(e.Value.ToString());
        var dataDoanhthunam = await Getdoanhthunam(nam);

        await JS.InvokeVoidAsync("chartHelper.renderChart", "Doanhthunam", dataDoanhthunam, "bar");
        StateHasChanged();
    }

    private async Task OnMonthChanged(ChangeEventArgs e)
    {
        int nam = int.Parse(this.year);
        int thang = int.Parse(e.Value.ToString());

        var dataDoanhthuthang = await Getdoanhthuthang(nam, thang);
        await JS.InvokeVoidAsync("chartHelper.renderChart", "Doanhthuthang", dataDoanhthuthang, "bar");
        StateHasChanged();
    }

    private async Task TimKiem()
    {
        try
        {
            int thang = int.Parse(this.month);
            int nam = int.Parse(this.year);

            var dataDoanhthuthang = await Getdoanhthuthang(nam, thang);
            var dataDoanhthunam = await Getdoanhthunam(nam);
            var dataDoanhthunamtheoSP = await GetdoanhthunamTheoSP();

            await JS.InvokeVoidAsync("chartHelper.renderChart", "Doanhthuthang", dataDoanhthuthang, "bar");
            await JS.InvokeVoidAsync("chartHelper.renderChart", "Doanhthunam", dataDoanhthunam, "bar");
            await JS.InvokeVoidAsync("chartHelper.renderChart", "DoanhthunamtheoSP", dataDoanhthunamtheoSP, "bar");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Logger.LogInformation(ex.Message);
        }
    }

    public async Task<object> Getdoanhthunam(int nam)
    {
        Doanhthunam = await ThongKeService.GetDoanhThuThueDoUocTinhAsync("", nam);
        tongDoanhThuNam = (double)Doanhthunam.Sum(x => x.revenue);

        // Lấy danh sách tháng có dữ liệu
        var labels = Doanhthunam
            .Select(x => x.rental_date.ToString("MM/yyyy"))
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        // Tính tổng doanh thu cho từng tháng
        var data = labels
            .Select(label => Doanhthunam
                .Where(x => x.rental_date.ToString("MM/yyyy") == label)
                .Sum(x => x.revenue))
            .ToList();

        // Tạo dataset (dạng đơn, không phân nhóm)
        var datasets = new[]
        {
        new
        {
            label = "Tổng doanh thu",
            data = data,
            backgroundColor = "rgba(79, 195, 247, 0.5)",
            borderColor = "rgba(79, 195, 247, 1)",
            borderWidth = 2,
            fill = true,
            tension = 0.4
        }
    };

        // Tạo chartData trả về JS
        var chartData = new
        {
            labels = labels,
            datasets = datasets
        };

        return chartData;
    }

    public async Task<object> GetdoanhthunamTheoSP()
    {
        Doanhthunam = await ThongKeService.GetDoanhThuThueDoUocTinhAsync("", 2025);

        var labels = Doanhthunam
            .Select(x => x.rental_date.Date.ToString("MM/yyyy"))
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        // Nhóm theo loại sản phẩm
        var productGroups = Doanhthunam
            .GroupBy(x => x.product_type)
            .ToDictionary(
                g => g.Key,
                g => labels.Select(label =>
                    g.Where(x => x.rental_date.Date.ToString("MM/yyyy") == label)
                     .Sum(x => x.revenue)
                ).ToList()
            );

        // Tạo datasets
        var datasets = productGroups.Select(g => new
        {
            label = g.Key,
            data = g.Value,
            backgroundColor = GetRandomColor(),
            borderColor = "'rgba(79, 195, 247, 0.1)",
            borderWidth = 1,
            fill = true,
            tension = 0.4
        }).ToList();

        // Tạo chartData
        var chartData = new
        {
            labels = labels,
            datasets = datasets
        };
        return chartData;
    }

    public async Task<object> Getdoanhthuthang(int nam, int thang)
    {
        Doanhthuthang = await ThongKeService.GetDoanhThuThueDoUocTinhAsync("", nam, thang);
        tongdoanhthuthang = (double)Doanhthuthang.Sum(x => x.revenue);


        var labels = Doanhthuthang
            .Select(x => x.rental_date.Date.ToString("MM/yyyy"))
            .Distinct()
            .OrderBy(x => x)
            .ToList();

        // Nhóm theo loại sản phẩm
        var productGroups = Doanhthuthang
            .GroupBy(x => x.product_type)
            .ToDictionary(
                g => g.Key,
                g => labels.Select(label =>
                    g.Where(x => x.rental_date.Date.ToString("MM/yyyy") == label)
                     .Sum(x => x.revenue)
                ).ToList()
            );

        // Tạo datasets
        var datasets = productGroups.Select(g => new
        {
            label = g.Key,
            data = g.Value,
            backgroundColor = GetRandomColor(),
            borderColor = "'rgba(79, 195, 247, 0.1)",
            borderWidth = 1,
            fill = true,
            tension = 0.4
        }).ToList();

        // Tạo chartData
        var chartData = new
        {
            labels = labels,
            datasets = datasets
        };
        return chartData;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TimKiem();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        this.month = DateTime.Now.Month.ToString();
        this.year = DateTime.Now.Year.ToString();
    }

    private static readonly Random rand = new Random();
    private string GetRandomColor()
    {
        int r = rand.Next(0, 256);
        int g = rand.Next(0, 256);
        int b = rand.Next(0, 256);
        return $"rgba({r}, {g}, {b}, 0.5)";
    }
}
